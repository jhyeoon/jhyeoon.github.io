---
layout: post
title:  "ML세션 3주차"
date:   2024-08-07 19:37:24 +0900
categories: jekyll update
---

**# 혼자 공부하는 머신러닝+딥러닝 Ch. 3**

# Ch.3 회귀 알고리즘과 모델 규제

## 3-1 k-최근접 이웃 회귀

### 회귀

- 지도 학습 알고리즘
    - 분류 (2장) 
    - **회귀 (3장)** 

- k-최근접 이웃 알고리즘
    - k-최근접 이웃 분류 알고리즘
        - 샘플의 타깃이 클래스
        - 가장 가까운 샘플 k개를 선택하여 클래스 확인 후, 다수의 클래스를 새로운 샘플의 클래스로 예측

    - **k-최근접 이웃 회귀 알고리즘**
        - 샘플의 타깃이 수치
        - 가장 가까운 샘플 k개를 선택하여 수치 확인 후, 수치들의 평균을 새로운 샘플의 수치로 예측

### k-최근접 이웃 회귀

**1. perch_length와 perch_weight 불러오기**
```python
import numpy as np

perch_length = np.array(
    [8.4, 13.7, 15.0, 16.2, 17.4, 18.0, 18.7, 19.0, 19.6, 20.0,
     21.0, 21.0, 21.0, 21.3, 22.0, 22.0, 22.0, 22.0, 22.0, 22.5,
     22.5, 22.7, 23.0, 23.5, 24.0, 24.0, 24.6, 25.0, 25.6, 26.5,
     27.3, 27.5, 27.5, 27.5, 28.0, 28.7, 30.0, 32.8, 34.5, 35.0,
     36.5, 36.0, 37.0, 37.0, 39.0, 39.0, 39.0, 40.0, 40.0, 40.0,
     40.0, 42.0, 43.0, 43.0, 43.5, 44.0]
     )
perch_weight = np.array(
    [5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0,
     110.0, 115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0,
     130.0, 150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0,
     197.0, 218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0,
     514.0, 556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0,
     820.0, 850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0,
     1000.0, 1000.0]
     )
```
</br>

**2. perch 데이터를 train set와 test set로 나누기**
```python
from sklearn.model_selection import train_test_split

train_input, test_input, train_target, test_target = train_test_split(
    perch_length, perch_weight, random_state=42)
```

</br>

**3. train_input과 test_input 1차원 배열에서 열이 1개인 2차원 배열로 바꾸기**
```python
train_input = train_input.reshape(-1, 1)
test_input = test_input.reshape(-1, 1)
```
![image](https://github.com/user-attachments/assets/9ce502a0-e1b7-4987-9412-bbf6c558364a)

- **.reshape()**
: 배열의 크기 변형해주는 메서드
    - array.reshape( , )
    - reshape에서 -1
        - ex) 배열 x의 크기가 12일 때, x.reshape(-1, 3)을 하면 변경할 배열의 크기는 자동으로 (12/3 = 4, 3)
        - ex) 배열 x의 크기가 12일 때, x.reshape(2, -1)을 하면 차원의 크기는 자동으로 (2, 12/2 = 6)

</br>

**4. k-최근접 이웃 회귀 모델 훈련하기**
```python
from sklearn.neighbors import KNeighborsRegressor

knr = KNeighborsRegressor()
knr.fit(train_input, train_target)
```

</br>

**5. 모델 성능 평가하기**
```python
knr.score(test_input, test_target)
```
> 0.992809406101064

- **결정계수**(coefficient of determination)
    - 예측이 타깃 평균에 가까워지면 &rarr; score=0
    - 예측이 타깃에 가까워지면 &rarr; score=1
    - 1에 가까울수록 좋음

    $$R^2 = 1 - \frac{(타깃-예측)^2}{(타깃-타깃 평균)^2}$$

</br>

**6. 타깃과 예측한 값 사이의 차이 구하기**
```python
from sklearn.metrics import mean_absolute_error

# 테스트 세트에 대한 예측을 만듭니다
test_prediction = knr.predict(test_input)
# 테스트 세트에 대한 평균 절댓값 오차를 계산합니다
mae = mean_absolute_error(test_target, test_prediction)
print(mae)
```
> 19.157142857142862

&rarr; 예측이 평균적으로 19g 정도 타깃값과 다름

7. 과대적합인지 과소적합인지 확인하기

> 과대적합 vs 과소적합 <br>
    - 과대적합 <br>
: 평가 시 훈련 세트를 사용했을 때의 점수 >> 평가 시 테스트 세트를 사용했을 때의 점수 <br>
    - 과소적합 <br>
: 평가 시 훈련 세트를 사용했을 때의 점수 < 평가 시 테스트 세트를 사용했을 때의 점수 or 두 점수 모두 낮은 경우 <br>
    &larr; 모델이 너무 단순해서 훈련 세트로 적절히 훈련되지 않아서 발생 or 훈련 세트와 테스트 세트의 크기가 매우 작은 경우 발생

```python
print(knr.score(train_input, train_target))
```
> 0.9698823289099254

&rarr; 이 모델에서는 과소적합이 발생 <br>
&rarr; k의 개수를 줄임으로써 모델을 더 복잡하게 만들어야 함 <br>
    - 이웃의 개수를 줄이면 국지적 패턴에 민감해짐 <br>
    - 이웃의 개수를 늘리면 일반적인 패턴을 따름

</br>

**8. 과소적합 해결하기**
```python
# 이웃의 갯수를 3으로 설정합니다
knr.n_neighbors = 3
# 모델을 다시 훈련합니다
knr.fit(train_input, train_target)
print(knr.score(train_input, train_target))
```
> 0.9804899950518966
```python
print(knr.score(test_input, test_target))
```
> 0.9746459963987609

&rarr; 평가 시 훈련 세트를 사용했을 때의 점수 > 평가 시 테스트 세트를 사용했을 때의 점수 <br>
&rarr; 과소적합 해결!

## 3-2 선형 회귀

- k-means 이웃 회귀의 문제점 <br>
: 훈련 데이터의 범위를 크게 벗어난 샘플도 그것과 가장 가까운 이웃들의 평균을 사용하기 때문에 실제 타깃과 예측값이 차이가 나게 됨

    - print(knr.predict([[50]]))
        > 1033.33333333333

        <img width="431" alt="image" src="https://github.com/user-attachments/assets/9cd8de27-27ab-433a-bb95-1dbb6865bfab">

    - print(knr.predict([[100]]))
        > 1033.33333333333

        <img width="431" alt="image" src="https://github.com/user-attachments/assets/38ea6886-2fde-4296-a48f-2fc5cec36312">

- 해결방안 <br>
: "선형 회귀" 사용

### 선형 회귀
: 특성이 하나인 경우 어떤 직선을 학습하는 알고리즘

1. 선형 회귀 모델 훈련하기

```python
from sklearn.linear_model import LinearRegression
lr = LinearRegression()

lr.fit(train_input, train_target)
```

2. 50cm 농어의 무게 예측하기
```python
print(lr.predict([[50]]))
```
> [1241.83860323]

3. lr 모델의 파라미터 찾기
```python
print(lr.coef_, lr.intercept_)
```
> [39.01714496] -709.0186449535477

- **coef_** (기울기)
    - coefficient(계수)
    - weight(가중치)

- **intercept_** (절편)

``` 
머신러닝에서 "훈련"의 의미

- 모델 기반 학습 (선형 회귀)
: 훈련 과정이 최적의 모델 파라미터를 찾는 것

- 사례 기반 학습 (k-최근접 이웃)
: 훈련 과정이 훈련 세트를 저장하는 것
```

4. 산점도와 회귀선 그리기
```python
# 훈련 세트의 산점도를 그립니다
plt.scatter(train_input, train_target)
# 15에서 50까지 1차 방정식 그래프를 그립니다
plt.plot([15, 50], [15*lr.coef_+lr.intercept_, 50*lr.coef_+lr.intercept_])
# 50cm 농어 데이터
plt.scatter(50, 1241.8, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()
```

<img width="433" alt="image" src="https://github.com/user-attachments/assets/94ad1714-09c8-4de1-9ae2-7b6a7b3ec399">

5. 훈련 세트와 테스트 세트의 $R^2$ 확인하기
```python
print(lr.score(train_input, train_target))
print(lr.score(test_input, test_target))
```
> 0.939846333997604
> 0.8247503123313558















